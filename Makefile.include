##
## This file is part of the libopencm3 project.
##
## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
## Copyright (C) 2010 Piotr Esden-Tempski <piotr@esden.net>
##
## This library is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library.  If not, see <http://www.gnu.org/licenses/>.
##
## Modified by Alexandru-Sever Horin


PREFIX	?= arm-eabi
CC		= $(PREFIX)-gcc
LD		= $(PREFIX)-gcc
OBJCOPY		= $(PREFIX)-objcopy
OBJDUMP		= $(PREFIX)-objdump
GDB		= $(PREFIX)-gdb

TOOLCHAIN_DIR ?= /usr/arm-eabi
ifeq ($(wildcard /usr/arm-eabi/lib/libopencm3_stm32f1.a),)
$(info We found the libopenm3 library!)
ifneq ($(strip $(shell which $(CC))),)
TOOLCHAIN_DIR := $(shell dirname `which $(CC)`)/../$(PREFIX)
endif
else
ifeq ($(V),1)
$(info We seem to be building the example in the source directory. Using local library!)
endif
endif

ARCH_FLAGS      = -mthumb -mcpu=cortex-m3 -msoft-float
CFLAGS		+= -O0 -g -Wall -Wextra -I$(TOOLCHAIN_DIR)/include \
		   -fno-common $(ARCH_FLAGS) -MD -DSTM32F1
LDSCRIPT	?= $(BINARY).ld
LDFLAGS		+= \
		   -L$(TOOLCHAIN_DIR)/lib/thumb \
		   -T$(LDSCRIPT) -Wl,--gc-sections \
		   $(ARCH_FLAGS) 
OBJS		+= $(BINARY).o

OOCD	    	?= openocd
OOCD_INTERFACE	?= jtagkey2
OOCD_TARGET  	?= stm32f1x
# Black magic probe specific variables
# Set the BMP_PORT to a serial port and then BMP is used for flashing
BMP_PORT        ?=

# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
Q := @
NULL := 2>/dev/null
else
LDFLAGS += -Wl,--print-gc-sections
endif

.SUFFIXES: .elf .bin .hex .srec .list .images
.SECONDEXPANSION:
.SECONDARY:

all: images

images: $(BINARY).images
flash: $(BINARY).flash
debug: $(BINARY).debug

dummy: 
	echo $(LDFLAGS)

%.images: %.bin %.hex %.srec %.list
	@echo "*** $* images generated ***"

%.bin: %.elf
	@printf "  OBJCOPY $(*).bin\n"
	$(Q)$(OBJCOPY) -Obinary $(*).elf $(*).bin

%.hex: %.elf
	@printf "  OBJCOPY $(*).hex\n"
	$(Q)$(OBJCOPY) -Oihex $(*).elf $(*).hex

%.srec: %.elf
	@printf "  OBJCOPY $(*).srec\n"
	$(Q)$(OBJCOPY) -Osrec $(*).elf $(*).srec

%.list: %.elf
	@printf "  OBJDUMP $(*).list\n"
	$(Q)$(OBJDUMP) -S $(*).elf > $(*).list

$(BINARY).elf: $(OBJS) $(LDSCRIPT) $(TOOLCHAIN_DIR)/lib/libopencm3_stm32f1.a
	@printf "  LD      $(subst $(shell pwd)/,,$(@))\n"
	$(Q)$(LD) -o $(*).elf $(OBJS) -lopencm3_stm32f1 $(LDFLAGS)

%.o: %.c Makefile
	@printf "  CC      $(subst $(shell pwd)/,,$(@))\n"
	$(Q)$(CC) $(CFLAGS) -o $@ -c $<

clean:
	$(Q)rm -f *.o
	$(Q)rm -f *.d
	$(Q)rm -f *.elf
	$(Q)rm -f *.bin
	$(Q)rm -f *.hex
	$(Q)rm -f *.srec
	$(Q)rm -f *.list

%.flash: %.hex
	@printf "  FLASH   $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
		    -f target/$(OOCD_TARGET).cfg \
		    -c "init" -c "reset init" \
		    -c "stm32f1x mass_erase 0" \
		    -c "flash write_image $(*).hex" \
		    -c "reset run" \
		    -c "shutdown" $(NULL)

%.debug: %.hex
	@printf "  DEBUG   $<\n"
	@# IMPORTANT: Don't use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f interface/$(OOCD_INTERFACE).cfg \
		    -f target/$(OOCD_TARGET).cfg \
		    -c "init" -c "reset init" \
		    -c "stm32f1x mass_erase 0" \
		    -c "flash write_image $(*).hex" \
		    -c "reset halt"


.PHONY: images clean

-include $(OBJS:.o=.d)

